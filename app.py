import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import re
from datetime import timedelta

# ==== –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª ====

from streamlit.delta_generator import DeltaGenerator

def format_number(val):
    """
    –§–æ—Ä–º–∞—Ç—É—î —á–∏—Å–ª–∞ —É —Å—Ç–∏–ª—ñ UA:
    - —Ü—ñ–ª—ñ: —Ä–æ–∑–¥—ñ–ª—è—î —Ç–∏—Å—è—á—ñ –ø—Ä–æ–±—ñ–ª–æ–º (12 345 678)
    - –¥—Ä–æ–±–æ–≤—ñ: —Ä–æ–∑–¥—ñ–ª—è—î —Ç–∏—Å—è—á—ñ –ø—Ä–æ–±—ñ–ª–æ–º —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–æ–º—É —è–∫ –¥–µ—Å—è—Ç–∫–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ (12 345 678,90)
    """
    import numpy as _np

    # —Ü—ñ–ª–µ —á–∏—Å–ª–æ
    if isinstance(val, (int, _np.integer)):
        s = f"{val:,}"            # '12,345,678'
        return s.replace(",", " ")  # '12 345 678'

    # —á–∏—Å–ª–æ –∑ –ø–ª–∞–≤–∞—é—á–æ—é –∫—Ä–∞–ø–∫–æ—é
    elif isinstance(val, (float, _np.floating)):
        s = f"{val:,.2f}"         # '12,345,678.90'
        s = s.replace(",", " ")   # '12 345 678.90'
        return s.replace(".", ",")  # '12 345 678,90'

    # —Ä—è–¥–æ–∫ —ñ–∑ –¥–µ—Å—è—Ç–∫–æ–≤–∏–º —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–æ–º —É –≤–∏–≥–ª—è–¥—ñ –∫—Ä–∞–ø–∫–∏
    elif isinstance(val, str):
        # –∑–∞–º—ñ–Ω—é—î–º–æ –∫—Ä–∞–ø–∫—É –Ω–∞ –∫–æ–º—É
        return val.replace(".", ",")

    # —É—Å–µ —ñ–Ω—à–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–µ–∑ –∑–º—ñ–Ω
    return val

# ==== –ü—ñ–¥–º—ñ–Ω–∞ –º–µ—Ç–æ–¥—É metric —É DeltaGenerator, —â–æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —á–∏—Å–ª–∞ ====
_orig_dd_metric = DeltaGenerator.metric

def _dd_metric(self, label: str, value, delta=None, **kwargs):
    """
    –û–±–≥–æ—Ä—Ç–∫–∞ –Ω–∞–¥ DeltaGenerator.metric, —è–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—î value —ñ delta
    —á–µ—Ä–µ–∑ format_number.
    """
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ –í–°–ï: int, float —ñ —Ä—è–¥–∫–∏
    formatted_value = format_number(value)
    formatted_delta = format_number(delta) if delta is not None else None
    return _orig_dd_metric(self, label, formatted_value, formatted_delta, **kwargs)

# –ü—ñ–¥–º—ñ–Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
DeltaGenerator.metric = _dd_metric

@st.cache_data(show_spinner=False)
def load_tariff_df(file_id):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î CSV –∑ Google Drive, –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –¥–∞—Ç—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î DataFrame"""
    url = f"https://drive.google.com/uc?export=download&id={file_id}"
    df = pd.read_csv(url)
    df["date"] = pd.to_datetime(df["date"], format="%Y-%m-%d", errors="coerce")
    df = df.dropna(subset=["date"])
    df = df.sort_values("date")
    return df

st.set_page_config(page_title="CASES Dashboard", layout="wide")

# CSS –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å–∫—Ä–æ–ª—É –∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º
st.markdown(
    """
    <style>
      /* –¥–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç—É–ø –∑–≤–µ—Ä—Ö—É –¥–ª—è –≤—Å—ñ—Ö –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ */
      h3 { scroll-margin-top: 100px; }
    </style>
    """,
    unsafe_allow_html=True
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞
st.title("CASES Dashboard")

# üìÇ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –ø–æ –∫–æ–º–ø–∞–Ω—ñ—è–º, —Å—Ç—É–¥–µ–Ω—Ç–∞–º, –ø—Ä–æ—Ñ—ñ–ª—è–º —Ç–∞ —Ç—Ä—ñ–∞–ª–∞–º
statistic_files = {
    "companies": "1OVBwvUjNbJFY_cvLCh6RynL_WKowqXJ2",
    "students": "1gJTkWUssnOKKlBSIxk6rQETuEaFTA9EL",
    "users": "1nuxKPhBP1qx09FcuCPG1uIobrG92dxHE",
    "trials": "1AsIIcj-2lYQWXHfPoMWsdtA46nqUbduH"
}

# üì¶ –°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ—ñ–≤
tariff_files = {
    "Full Access 0UAH": "1XoUhnsGUeVL3qwHMYJbk4mpCn3lhoEkB",
    # "Full Access 5UAH": "1ngAmfUoL3qYM6l_URNDECZRW35XC_thY",   —Ü–µ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ
    "Full Access 250UAH": "1G60JUAk_vQVXVQnjZF9uK2VwUbYDlK6P",
    "Full Access 350UAH": "1eYubeexGVF5MKJFZIF6ZOwEfDDad1zPB",
    "Full Access 390UAH": "1xeTeJV8JvOowE8JG5I6tog3euIKvDDNj",
    "Full Access 550UAH": "1b5fMQ_5Y522zJssO_AikhkLBTfI3p_Bf",
    "Full Access 1000UAH": "1mOZsP89AhTufFvG2nSmbV6w5GSOKyGVx",
    "Full Access 1200UAH": "1M1u8AAQHFv81BNtlvi4P6llT0OO817dj",
    "Theory Only 0UAH": "1SyARqxHQzEPlK9GEuUvNV1SEFeghJ1pr",
    "Theory Only 250UAH": "1q4c0m434WK46Thei_pgkdVB5lLDnQqZz",
    "Theory Only 500UAH": "1eFhAfdSC2LOLX3tJX5BWyGM693d0ASyK",
    "Theory Only 600UAH": "1EdZRWRQxLUfKprV5GgRWjjR_Jzyc7CEh",
}

tabs = st.tabs([
    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥–ø–ª–∞—Ç",
    "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—ñ–≤",
    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ —Ç–∞ —Ç—Ä—ñ–∞–ª—ñ–≤"
])

with tabs[0]:

    # üß© –ö–æ–Ω—Ç—Ä–æ–ª –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ—ñ–≤
    selected_tariffs = st.multiselect(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ–∏",
        options=list(tariff_files.keys()),
        default=["Full Access 250UAH"]
    )

    # üßæ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–±'—î–¥–Ω–∞–Ω–Ω—è CSV-—Ñ–∞–π–ª—ñ–≤
    dfs = []
    for tariff in selected_tariffs:
        file_id = tariff_files[tariff]
        csv_url = f"https://drive.google.com/uc?export=download&id={file_id}"
        df_part = pd.read_csv(csv_url)
        df_part["tariff_name"] = tariff  # –¥–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É –∑ –Ω–∞–∑–≤–æ—é —Ç–∞—Ä–∏—Ñ—É

        # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É –∑ —Ü—ñ–Ω–æ—é —Ç–∞—Ä–∏—Ñ—É (–≤–∏—Ç—è–≥—É—î–º–æ –∑ –Ω–∞–∑–≤–∏)
        match = re.search(r"(\d+)UAH", tariff)
        if match:
            df_part["price"] = int(match.group(1))
        else:
            df_part["price"] = 0  # —è–∫—â–æ —Ä–∞–ø—Ç–æ–º –Ω–µ–º–∞—î —Ü—ñ–Ω–∏ –≤ –Ω–∞–∑–≤—ñ —Ç–∞—Ä–∏—Ñ—É

        dfs.append(df_part)

    # üßÆ –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ –æ–±—Ä–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤ –æ–¥–Ω—É
    df = pd.concat(dfs, ignore_index=True)

    # üóì –û–±—Ä–æ–±–∫–∞ –¥–∞—Ç–∏
    df["date"] = pd.to_datetime(df["date"], format="%Y-%m-%d", errors="coerce")
    df = df.dropna(subset=["date"])

    # üìÜ –î—ñ–∞–ø–∞–∑–æ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç
    min_date = df["date"].min()
    max_date = df["date"].max()

    # üîé –ö–æ–Ω—Ç—Ä–æ–ª –∑ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º (–æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
    from datetime import datetime

    # üìÖ –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å
    today = pd.to_datetime(datetime.today().date())
    min_date = df["date"].min()
    max_data_date = df["date"].max()

    st.sidebar.header("–§—ñ–ª—å—Ç—Ä –∑–∞ –¥–∞—Ç–æ—é")

    # üß≠ –í–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—ñ–æ–¥—ñ–≤
    preset_option = st.sidebar.selectbox(
        "–®–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É:",
        (
            "–û—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤",
            "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å",
            "–û—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ",
            "–û—Å—Ç–∞–Ω–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤",
            "–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–∫",
            "–í–µ—Å—å —á–∞—Å"
        )
    )

    # üîÅ –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–±–æ—Ä—É
    if preset_option == "–û—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤":
        end_default = min(today, max_data_date)
        start_default = end_default - timedelta(days=30)

    elif preset_option == "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å":
        first_day_this_month = today.replace(day=1)
        last_day_prev_month = first_day_this_month - timedelta(days=1)
        start_default = last_day_prev_month.replace(day=1)
        end_default = last_day_prev_month

    elif preset_option == "–û—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ":
        end_default = min(today, max_data_date)
        start_default = end_default - pd.DateOffset(months=3)

    elif preset_option == "–û—Å—Ç–∞–Ω–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤":
        end_default = min(today, max_data_date)
        start_default = end_default - pd.DateOffset(months=6)

    elif preset_option == "–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–∫":
        end_default = min(today, max_data_date)
        start_default = end_default - pd.DateOffset(years=1)

    elif preset_option == "–í–µ—Å—å —á–∞—Å":
        start_default = min_date
        end_default = max_data_date

    # üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä –∑ –ø–µ—Ä–µ–¥–∑–∞–ø–æ–≤–Ω–µ–Ω–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º
    start_date, end_date = st.sidebar.date_input(
        "–ê–±–æ –æ–±–µ—Ä—ñ—Ç—å –≤—Ä—É—á–Ω—É:",
        value=[start_default, end_default],
        min_value=min_date,
        max_value=max_data_date
    )

    # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    st.sidebar.markdown(
        '<a href="https://docs.google.com/document/d/1YkcEtLCvnzlOZdBO5tPzCs35sQ87u9xmHiJuPS2TuBY/edit?tab=t.0" target="_blank">–Ø–∫ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ</a>',
        unsafe_allow_html=True
    )


    # –ù–∞–≤–∏–≥–∞—Ü—ñ—è –ø–æ —Ä–æ–∑–¥—ñ–ª–∞–º
    # st.sidebar.header("–ù–∞–≤—ñ–≥–∞—Ü—ñ—è")
    # nav_items = {
    #     "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥–ø–ª–∞—Ç": "metrics",
    #     "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—ñ–≤": "tariff-comparison",
    #     "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ —Ç–∞ —Ç—Ä—ñ–∞–ª—ñ–≤": "companies-students-profiles-trials"
    # }
    # for label, anchor in nav_items.items():
    #     st.sidebar.markdown(f"<a href='#{anchor}'>{label}</a>", unsafe_allow_html=True)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è
    cols_to_convert = [
        "start", "new", "reactivated",
        "upgradedEnter", "downgradedEnter",
        "end", "upgradedExit", "downgradedExit"
    ]

    # üîç –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º
    mask = (df["date"] >= pd.to_datetime(start_date)) & (df["date"] <= pd.to_datetime(end_date))
    filtered_raw = df.loc[mask].copy()

    # üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–ø–∞–Ω—ñ—è–º, —Å—Ç—É–¥–µ–Ω—Ç–∞–º —ñ –ø—Ä–æ—Ñ—ñ–ª—è–º
    def load_stat_file(file_id):
        url = f"https://drive.google.com/uc?export=download&id={file_id}"
        df_stat = pd.read_csv(url)
        df_stat["date"] = pd.to_datetime(df_stat["date"], format="%Y-%m-%d", errors="coerce")
        df_stat = df_stat.dropna(subset=["date"])
        return df_stat

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    companies_df = load_stat_file(statistic_files["companies"])
    students_df  = load_stat_file(statistic_files["students"])
    users_df     = load_stat_file(statistic_files["users"])
    trials_df    = load_stat_file(statistic_files["trials"])

    # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ –≤–∏–±—Ä–∞–Ω–æ–º—É –ø–µ—Ä—ñ–æ–¥—É
    companies_filtered = companies_df[(companies_df["date"] >= pd.to_datetime(start_date)) &
                                    (companies_df["date"] <= pd.to_datetime(end_date))]
    students_filtered  = students_df [(students_df["date"]  >= pd.to_datetime(start_date)) &
                                    (students_df["date"]  <= pd.to_datetime(end_date))]
    users_filtered     = users_df    [(users_df["date"]     >= pd.to_datetime(start_date)) &
                                    (users_df["date"]     <= pd.to_datetime(end_date))]
    trials_filtered    = trials_df    [(trials_df["date"]     >= pd.to_datetime(start_date)) &
                                    (trials_df["date"]     <= pd.to_datetime(end_date))]

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –º–µ–¥—ñ–∞–Ω–∏ –¥–ª—è —Ç—Ä—ñ–∞–ª—ñ–≤ –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
    median_trials = trials_filtered["active"].median() if not trials_filtered.empty else 0

    # üîß –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ —á–∏—Å–ª–æ–≤—ñ —Ç–∏–ø–∏
    for col in cols_to_convert:
        filtered_raw[col] = pd.to_numeric(filtered_raw.get(col, 0), errors="coerce").fillna(0)

    # –ê–≥—Ä–µ–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ –¥–∞—Ç—ñ –¥–ª—è –≤—Å—ñ—Ö –≤–∏–±—Ä–∞–Ω–∏—Ö —Ç–∞—Ä–∏—Ñ—ñ–≤
    aggregated_df = (
        filtered_raw
        .groupby("date", as_index=False)[cols_to_convert]
        .sum()
    )

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Churned Users
    aggregated_df["Churned Users"] = (
        aggregated_df["start"]
        + aggregated_df["new"]
        + aggregated_df["reactivated"]
        + aggregated_df["upgradedEnter"]
        + aggregated_df["downgradedEnter"]
        - aggregated_df["end"]
        - aggregated_df["upgradedExit"]
        - aggregated_df["downgradedExit"]
    ).clip(lower=0)

    # üìä –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Ç–∞ –∫—ñ–Ω–µ—Ü—å –ø–µ—Ä—ñ–æ–¥—É
    start_value_row = df[df["date"] == pd.to_datetime(start_date)]
    start_value = int(
        aggregated_df.loc[
            aggregated_df["date"] == pd.to_datetime(start_date),
            "start"
        ].sum()
    ) if not aggregated_df.empty else "‚Äî"

    end_value_row = df[df["date"] == pd.to_datetime(end_date)]
    end_value = int(
        aggregated_df.loc[
            aggregated_df["date"] == pd.to_datetime(end_date),
            "end"
        ].sum()
    ) if not aggregated_df.empty else "‚Äî"

    # üìà –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞ —Å—É–º–æ—é
    new_subs = int(aggregated_df["new"].sum())
    reactivated = int(aggregated_df["reactivated"].sum())
    upgraded = int(aggregated_df["upgradedEnter"].sum())
    downgraded = int(aggregated_df["downgradedEnter"].sum())
    churned_total= int(aggregated_df["Churned Users"].sum())

    # üîÅ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Churned Users –ø–æ –¥–Ω—è—Ö
    churned_series = (
        aggregated_df["start"]
        + aggregated_df["new"]
        + aggregated_df["reactivated"]
        + aggregated_df["upgradedEnter"]
        + aggregated_df["downgradedEnter"]
        - aggregated_df["end"]
        - aggregated_df["upgradedExit"]
        - aggregated_df["downgradedExit"]
    ).clip(lower=0)

    churned_total = int(churned_series.sum())    

    # üìå –í–∏–≤–µ–¥–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫ –≤ –æ–¥–∏–Ω —Ä—è–¥
    st.markdown("<a id='metrics'></a>", unsafe_allow_html=True)
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥–ø–ª–∞—Ç")

    col1, col2, col3, col4, col5, col6, col7 = st.columns(7)
    col1.metric("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n–Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –ø–µ—Ä—ñ–æ–¥—É", start_value)
    col2.metric("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n–Ω–∞ –∫—ñ–Ω–µ—Ü—å –ø–µ—Ä—ñ–æ–¥—É", end_value)
    col3.metric("–ù–æ–≤–∏—Ö\n–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", new_subs)
    col4.metric("–†–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏—Ö\n–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", reactivated)
    col5.metric("Upgrade\n(–≤—Ö—ñ–¥)", upgraded)
    col6.metric("Downgrade\n(–≤—Ö—ñ–¥)", downgraded)
    col7.metric("Churned\nUsers", churned_total)

    # ‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏ Churned Users –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
    aggregated_df["Churned Users"] = churned_series

    # üìà –ì—Ä–∞—Ñ—ñ–∫ "Users"
    st.subheader("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")

    fig = px.line(
        aggregated_df,
        x="date",
        y=["start", "new", "reactivated", "Churned Users"],
        markers=True,
    )
    fig.update_layout(xaxis_title=None, yaxis_title=None)
    fig.update_xaxes(tickmode="linear", tickangle=45)

    st.plotly_chart(fig, use_container_width=True)

    # üí∞ –¶—ñ–ª—å–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    st.markdown("<a id='monthly-targets'></a>", unsafe_allow_html=True)
    st.subheader("–¶—ñ–ª—å–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏")

    ad_budget = 5000  # —Ä–µ–∫–ª–∞–º–Ω–∏–π –±—é–¥–∂–µ—Ç

    # MRR

    # –ì—Ä—É–ø—É—î–º–æ –ø–æ –Ω–∞–∑–≤—ñ —Ç–∞—Ä–∏—Ñ—É —Ç–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π start
    mrr = 0
    for tariff in selected_tariffs:
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω–∏–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –ø–æ —Ç–∞—Ä–∏—Ñ—É
        tariff_df = filtered_raw[filtered_raw["tariff_name"] == tariff]
        if not tariff_df.empty:
            avg_start = tariff_df["start"].mean()
            price = tariff_df["price"].iloc[0]  # —Ü—ñ–Ω–∞ –¥–ª—è —Ü—å–æ–≥–æ —Ç–∞—Ä–∏—Ñ—É
            mrr += avg_start * price

    mrr = int(round(mrr))

    # Churn Rate
    try:
        churn_rate = churned_total / start_value
        churn_rate_str = f"{churn_rate:.1%}"
    except (ZeroDivisionError, TypeError):
        churn_rate = None
        churn_rate_str = "‚Äî"

    # Growth Rate
    # üí° –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ MRR –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —ñ –∫—ñ–Ω–µ—Ü—å –ø–µ—Ä—ñ–æ–¥—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —É—Å—ñ—Ö —Ç–∞—Ä–∏—Ñ—ñ–≤

    def calc_mrr_on_date(date, df):
        mrr = 0
        for tariff in selected_tariffs:
            sub = df[(df["date"] == pd.to_datetime(date)) & (df["tariff_name"] == tariff)]
            if not sub.empty:
                start = sub["start"].values[0]
                price = sub["price"].values[0]
                mrr += start * price
        return mrr

    mrr_first = calc_mrr_on_date(start_date, filtered_raw)
    mrr_last  = calc_mrr_on_date(end_date, filtered_raw)

    try:
        growth_rate = (mrr_last - mrr_first) / mrr_first if mrr_first != 0 else 0
        growth_rate_str = f"{growth_rate:.1%}"
    except ZeroDivisionError:
        growth_rate_str = "‚Äî"

    # Lifetime
    if churn_rate and churn_rate != 0:
        lifetime = 1 / churn_rate
        lifetime_str = f"{lifetime:.1f}"
    else:
        lifetime = None
        lifetime_str = "‚Äî"

    # ARPPU ‚Äî —Å–µ—Ä–µ–¥–Ω—ñ–π –¥–æ—Ö—ñ–¥ –Ω–∞ –ø–ª–∞—Ç–Ω–∏–∫–∞
    try:
        arppu = mrr / end_value if end_value else None
        arppu_str = f"{arppu:.2f}" if arppu is not None else "‚Äî"
    except ZeroDivisionError:
        arppu = None
        arppu_str = "‚Äî"

    # LTV ‚Äî –∂–∏—Ç—Ç—î–≤–∏–π —Ü–∏–∫–ª –∫–ª—ñ—î–Ω—Ç–∞
    if lifetime and arppu:
        ltv = lifetime * arppu
        ltv_str = f"{int(ltv)}"
    else:
        ltv = None
        ltv_str = "‚Äî"

    # CAC ‚Äî –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–ª—É—á–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        cac = ad_budget / new_subs if new_subs else None
        cac_str = f"{cac:.2f}" if cac is not None else "‚Äî"
    except ZeroDivisionError:
        cac = None
        cac_str = "‚Äî"

    # LTV / CAC
    try:
        ltv_cac = ltv / cac if (ltv is not None and cac) else None
        ltv_cac_str = f"{ltv_cac:.2f}" if ltv_cac is not None else "‚Äî"
    except ZeroDivisionError:
        ltv_cac_str = "‚Äî"

    # üßÆ –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫
    col1, col2, col3, col4, col5, col6, col7 = st.columns(7)
    col1.metric("MRR", mrr)
    col2.metric("Churn rate", churn_rate_str)
    col3.metric("Growth rate", growth_rate_str)
    col4.metric("Lifetime (–º—ñ—Å.)", lifetime_str)
    col5.metric("LTV", ltv_str)
    #col6.metric("CAC", cac_str)
    #col7.metric("LTV / CAC", ltv_cac_str)

    # üìä –ì—Ä–∞—Ñ—ñ–∫ MRR –ø–æ –¥–Ω—è—Ö
    st.subheader("MRR")

    # –î–æ–¥–∞—î–º–æ –≤ aggregated_df —Å—Ç–æ–≤–ø–µ—Ü—å MRR –ø–æ –¥–Ω—è—Ö (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ü—ñ–Ω —Ç–∞—Ä–∏—Ñ—ñ–≤)
    def calc_mrr_day(day):
        # day ‚Äî –¥–∞—Ç–∞
        mrr_day = 0
        for tariff in selected_tariffs:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –≤ filtered_raw –∑ –ø–æ—Ç—Ä—ñ–±–Ω–æ—é –¥–∞—Ç–æ—é —ñ —Ç–∞—Ä–∏—Ñ–æ–º
            sub = filtered_raw[(filtered_raw["date"] == day) & (filtered_raw["tariff_name"] == tariff)]
            if not sub.empty:
                start = sub["start"].values[0]
                price = sub["price"].values[0]
                mrr_day += start * price
        return mrr_day

    aggregated_df["MRR"] = aggregated_df["date"].apply(calc_mrr_day)

    # –ë—É–¥—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ –∑–∞ –Ω–æ–≤–∏–º —Å—Ç–æ–≤–ø—á–∏–∫–æ–º
    fig_mrr = px.line(
        aggregated_df,
        x="date",
        y="MRR",
        markers=True
    )
    fig_mrr.update_layout(xaxis_title=None, yaxis_title=None)
    fig_mrr.update_xaxes(tickmode="linear", tickangle=45)

    st.plotly_chart(fig_mrr, use_container_width=True)

#----------------------------------------------------------------------------------------------------------------

with tabs[1]:

    # üìã –¢–∞–±–ª–∏—Ü—è –¥–∞–Ω–∏—Ö
    # st.subheader("–î–∞–Ω—ñ –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥:")
    # st.dataframe(aggregated_df, use_container_width=True)

    # üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—ñ–≤
    st.markdown("<a id='tariff-comparison'></a>", unsafe_allow_html=True)
    st.subheader("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—ñ–≤")

    # üßæ –ü–æ–∫–∞–∑–Ω–∏–∫–∏, —è–∫—ñ —Ö–æ—á–µ–º–æ –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏
    metrics_list = [
        "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –ø–µ—Ä—ñ–æ–¥—É",
        "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ –∫—ñ–Ω–µ—Ü—å –ø–µ—Ä—ñ–æ–¥—É",
        "–ù–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
        "–†–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
        "Churned users",
        "MRR",
        "Churn rate",
        "Lifetime (–º—ñ—Å.)",
        "ARPPU",
        "LTV",
        "CAC",
        "LTV / CAC"
    ]

    # üîÄ –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—ñ–≤
    tariff_names = list(tariff_files.keys())
    theory_tariffs = [name for name in tariff_names if "Theory Only" in name]
    full_tariffs = [name for name in tariff_names if "Full Access" in name]

    # üß± –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ MultiIndex
    multi_columns = pd.MultiIndex.from_tuples([
        ("–õ–∏—à–µ —Ç–µ–æ—Ä—ñ—è", name.replace("Theory Only ", "").replace("UAH", " –≥—Ä–Ω")) for name in theory_tariffs
    ] + [
        ("–ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø", name.replace("Full Access ", "").replace("UAH", " –≥—Ä–Ω")) for name in full_tariffs
    ])

    # üìê –ü–æ—Ä–æ–∂–Ω—è —Ç–∞–±–ª–∏—Ü—è –∑ MultiIndex-–∫–æ–ª–æ–Ω–∫–∞–º–∏
    data = pd.DataFrame(index=metrics_list, columns=multi_columns)

    # üîÑ –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ–º —Ç–∞—Ä–∏—Ñ–∞–º —ñ –æ–±—á–∏—Å–ª—é—î–º–æ –º–µ—Ç—Ä–∏–∫–∏
    for tariff in theory_tariffs + full_tariffs:
        file_id = tariff_files[tariff]
        csv_url = f"https://drive.google.com/uc?export=download&id={file_id}"

        try:
            df_tariff = load_tariff_df(file_id)

            # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É price, –≤–∏—Ç—è–≥—É—é—á–∏ —Ü—ñ–Ω—É –∑ –Ω–∞–∑–≤–∏ —Ç–∞—Ä–∏—Ñ—É
            match = re.search(r"(\d+)UAH", tariff)
            if match:
                df_tariff["price"] = int(match.group(1))
            else:
                df_tariff["price"] = 0        

            # –§—ñ–ª—å—Ç—Ä –ø–æ –¥–∞—Ç—ñ
            mask = (df_tariff["date"] >= pd.to_datetime(start_date)) & (df_tariff["date"] <= pd.to_datetime(end_date))
            df_filtered = df_tariff[mask].copy()

            # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞ —á–∏—Å–ª–∞
            for col in cols_to_convert:
                if col in df_filtered.columns:
                    df_filtered[col] = pd.to_numeric(df_filtered[col], errors="coerce").fillna(0)
                else:
                    df_filtered[col] = 0

            # –ú–µ—Ç—Ä–∏–∫–∏
            start_row = df_tariff[df_tariff["date"] == pd.to_datetime(start_date)]
            end_row = df_tariff[df_tariff["date"] == pd.to_datetime(end_date)]

            start_val = int(start_row["start"].values[0]) if not start_row.empty else 0
            end_val = int(end_row["end"].values[0]) if not end_row.empty else 0
            new_val = int(df_filtered["new"].sum())
            reactivated_val = int(df_filtered["reactivated"].sum())

            churned_series = (
                df_filtered["start"]
                + df_filtered["new"]
                + df_filtered["reactivated"]
                + df_filtered["upgradedEnter"]
                + df_filtered["downgradedEnter"]
                - df_filtered["end"]
                - df_filtered["upgradedExit"]
                - df_filtered["downgradedExit"]
            ).clip(lower=0)

            churned_val = int(churned_series.sum())
            if not df_filtered.empty:
                price = df_filtered["price"].iloc[0]
                mrr_val = int(df_filtered["start"].mean() * price)
            else:
                mrr_val = 0

            churn_rate = churned_val / start_val if start_val else None
            lifetime = 1 / churn_rate if churn_rate else None
            arppu = mrr_val / end_val if end_val else None
            ltv = lifetime * arppu if lifetime and arppu else None
            cac = ad_budget / new_val if new_val else None
            ltv_cac = ltv / cac if ltv and cac else None

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É –≤ —Ç–∞–±–ª–∏—Ü—ñ
            col_label = tariff.replace("Theory Only ", "").replace("Full Access ", "").replace("UAH", " –≥—Ä–Ω")
            col_group = "–õ–∏—à–µ —Ç–µ–æ—Ä—ñ—è" if "Theory Only" in tariff else "–ü–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø"

            # –ó–∞–ø–∏—Å –∑–Ω–∞—á–µ–Ω—å —É —Ç–∞–±–ª–∏—Ü—é
            data.loc["–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –ø–µ—Ä—ñ–æ–¥—É", (col_group, col_label)] = start_val
            data.loc["–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ –∫—ñ–Ω–µ—Ü—å –ø–µ—Ä—ñ–æ–¥—É", (col_group, col_label)] = end_val
            data.loc["–ù–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", (col_group, col_label)] = new_val
            data.loc["–†–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", (col_group, col_label)] = reactivated_val
            data.loc["Churned users", (col_group, col_label)] = churned_val
            data.loc["MRR", (col_group, col_label)] = mrr_val
            data.loc["Churn rate", (col_group, col_label)] = f"{churn_rate:.1%}" if churn_rate is not None else "‚Äî"
            data.loc["Lifetime (–º—ñ—Å.)", (col_group, col_label)] = f"{lifetime:.1f}" if lifetime is not None else "‚Äî"
            data.loc["ARPPU", (col_group, col_label)] = f"{arppu:.0f}" if arppu is not None else "‚Äî"
            data.loc["LTV", (col_group, col_label)] = f"{ltv:.0f}" if ltv is not None else "‚Äî"
            data.loc["CAC", (col_group, col_label)] = f"{cac:.2f}" if cac is not None else "‚Äî"
            data.loc["LTV / CAC", (col_group, col_label)] = f"{ltv_cac:.2f}" if ltv_cac is not None else "‚Äî"

        except Exception as e:
            st.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞–±–æ –æ–±—Ä–æ–±–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Ç–∞—Ä–∏—Ñ—É {tariff}: {e}")




    #–¢–∏–º—á–∞—Å–æ–≤–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –¥–≤–∞ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
    hide_metrics = ["CAC", "LTV / CAC"]
    data = data.drop(index=hide_metrics)






    # üñº –í–∏–≤—ñ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ –∑ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è–º –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
    st.markdown(
        data.style
            .format(format_number)  # –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–æ –≤—Å—ñ—Ö –∫–æ–º—ñ—Ä–æ–∫
            .set_table_styles([
                {"selector": "thead th", "props": [("text-align", "center")]}
            ])
            .to_html(),
        unsafe_allow_html=True
    )

#--------------------------------------------------------------------------------------

with tabs[2]:

    # üßæ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø–∞–Ω—ñ–π, —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —ñ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
    # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è total –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (companies_filtered, students_filtered, users_filtered)
    #total_companies = int(companies_filtered["total"].iloc[-1]) if not companies_filtered.empty else 0
    #total_students  = int(students_filtered["total"].iloc[-1])  if not students_filtered.empty  else 0
    #total_profiles  = int(users_filtered["total"].iloc[-1])     if not users_filtered.empty     else 0
    #total_trials  = int(trials_filtered["active"].iloc[-1])     if not trials_filtered.empty     else 0

    # –í–∏–≤—ñ–¥ –±–ª–æ–∫–∞ –º–µ—Ç—Ä–∏–∫
    #st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ —Ç–∞ —Ç—Ä—ñ–∞–ª—ñ–≤")
    #c1, c2, c3, c4 = st.columns(4)
    #c1.metric("–ö–æ–º–ø–∞–Ω—ñ—ó", total_companies)
    #c2.metric("–°—Ç—É–¥–µ–Ω—Ç–∏", total_students)
    #c3.metric("–ü—Ä–æ—Ñ—ñ–ª—ñ", total_profiles)
    #c4.metric("–¢—Ä—ñ–∞–ª–∏", total_trials)

    # üìà –ì—Ä–∞—Ñ—ñ–∫–∏ –ø–æ –∫–æ–∂–Ω–æ–º—É –ø–æ–∫–∞–∑–Ω–∏–∫—É

    st.markdown("<a id='companies-students-profiles-trials'></a>", unsafe_allow_html=True)
    row1_col1, row1_col2 = st.columns(2)

    with row1_col1:
        st.subheader("–ö–æ–º–ø–∞–Ω—ñ—ó")
        chart_comp = companies_filtered[["date", "total"]].rename(columns={"total": "–ö–æ–º–ø–∞–Ω—ñ—ó"})
        fig_comp = px.line(
            chart_comp,
            x="date",
            y="–ö–æ–º–ø–∞–Ω—ñ—ó",
            markers=True,
        )
        fig_comp.update_layout(xaxis_title=None, yaxis_title=None)
        fig_comp.update_xaxes(tickmode="linear", tickangle=45)
        st.plotly_chart(fig_comp, use_container_width=True)

    with row1_col2:
        st.subheader("–¢—Ä—ñ–∞–ª–∏")
        chart_trial = trials_filtered[["date", "active"]].rename(columns={"active": "–¢—Ä—ñ–∞–ª–∏"})
        fig_trial = px.line(
            chart_trial,
            x="date",
            y="–¢—Ä—ñ–∞–ª–∏",
            markers=True,
        )
        fig_trial.update_layout(xaxis_title=None, yaxis_title=None)
        fig_trial.update_xaxes(tickmode="linear", tickangle=45)
        # –î–æ–¥–∞—î–º–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É –ª—ñ–Ω—ñ—é-–º–µ–¥—ñ–∞–Ω—É
        fig_trial.add_hline(
            y=median_trials,
            line_dash="dash",
            line_color="orange",
            annotation_text=f"–ú–µ–¥—ñ–∞–Ω–∞: {int(median_trials)}",
            annotation_position="top left"
        )        
        st.plotly_chart(fig_trial, use_container_width=True)

    row2_col1, row2_col2 = st.columns(2)

    with row2_col1:
        st.subheader("–°—Ç—É–¥–µ–Ω—Ç–∏")
        chart_stud = students_filtered[["date", "total"]].rename(columns={"total": "–°—Ç—É–¥–µ–Ω—Ç–∏"})
        fig_stud = px.line(
            chart_stud,
            x="date",
            y="–°—Ç—É–¥–µ–Ω—Ç–∏",
            markers=True,
        )
        fig_stud.update_layout(xaxis_title=None, yaxis_title=None)
        fig_stud.update_xaxes(tickmode="linear", tickangle=45)
        st.plotly_chart(fig_stud, use_container_width=True)

    with row2_col2:
        st.subheader("–ü—Ä–æ—Ñ—ñ–ª—ñ")
        chart_prof = users_filtered[["date", "total"]].rename(columns={"total": "–ü—Ä–æ—Ñ—ñ–ª—ñ"})
        fig_prof = px.line(
            chart_prof,
            x="date",
            y="–ü—Ä–æ—Ñ—ñ–ª—ñ",
            markers=True,
        )
        fig_prof.update_layout(xaxis_title=None, yaxis_title=None)
        fig_prof.update_xaxes(tickmode="linear", tickangle=45)
        st.plotly_chart(fig_prof, use_container_width=True)